{"version":3,"sources":["components/CardFront.js","components/CardBack.js","containers/preview.js","components/renderSelectList.js","components/renderField.js","components/renderAvatar.js","data.js","components/Mainform.js","containers/mainform.js","containers/DisplayGrid.js","App.js","serviceWorker.js","index.js"],"names":["CardFront","_this$props","this","props","data","values","file","console","log","react_default","a","createElement","className","map","fields","i","name","concat","key","toUpperCase","undefined","src","imagePreviewUrl","alt","Component","CardBack","react_barcode_default","value","format","height","Preview","_this","Fragment","components_CardFront","Object","assign","ref","el","componentRef","lib_default","trigger","content","components_CardBack","componentRef1","renderSelectList","_ref","gender","label","type","item","htmlFor","Field","id","component","FormField","_ref$input","input","objectWithoutProperties","style","meta","error","renderAvatar","handleFile","onChange","reduxForm","form","handleSubmit","reset","onSubmit","field","formField","onClick","connect","state","getFormValues","components_Mainform","DisplayGrid","e","reader","FileReader","newfile","target","files","onloadend","setState","result","readAsDataURL","mainform","preview","App","containers_DisplayGrid","Boolean","window","location","hostname","match","store","createStore","combineReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed2599df.chunk.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\n\ntype Props = {\n  data: Array<{ name: string, label: string, type: string, gender?:$ReadOnlyArray<string>}>,\n  values: {},\n  file: { file?: {}, imagePreviewUrl: string }\n};\n\nclass CardFront extends Component<Props> {\n  render() {\n    const { data, values, file } = this.props;\n    console.log(this.props);\n    return (\n      <div className=\"card bgImg\">\n        <div className=\"card-content col left \">\n          <span className=\"item0 center-align large-text bold600\">\n            Identity Card\n          </span>\n          {data.map((fields, i) =>\n            fields.name !== 'dob' &&\n            fields.name !== 'sSN' &&\n            fields.name !== 'avatar' ? (\n              <p className={`item${i + 1} flex margin`} key={fields.name}>\n                <span className=\"bold600\">{fields.name.toUpperCase()}</span>\n                <span className=\"flex-grow1 right-align lightbg\">\n                  {values !== undefined && values[fields.name]}\n                </span>\n              </p>\n            ) : fields.name !== 'avatar' ? (\n              <div className={`item${i + 1} grid threeGrid`} key={fields.name}>\n                <p className=\"grid-col-span2 flex margin\">\n                  <span className=\"bold600\">{fields.name.toUpperCase()}</span>\n                  <span className=\"flex-grow1 right-align lightbg\">\n                    {values !== undefined && values[fields.name]}\n                  </span>\n                </p>\n              </div>\n            ) : (\n              <img\n                src={file.imagePreviewUrl}\n                alt=\"avatar\"\n                className=\"item8 photoholder\"\n                key={fields.name}\n              />\n            )\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CardFront;\n","import React, { Component } from 'react';\nimport Barcode from 'react-barcode';\n\nclass CardBack extends Component {\n  render() {\n    return (\n      <div className=\"grid card center-align cardBack bgImg2\">\n        <ul className=\"flex row wrap\">\n          <li className=\"small-font margin-right numericList\">FirstName</li>\n          <li className=\"small-font margin-right numericList\">LastName</li>\n          <li className=\"small-font margin-right numericList\">Date of Birth</li>\n          <li className=\"small-font margin-right numericList\">Social Security Number</li>\n          <li className=\"small-font margin-right numericList\">Date of Issue</li>\n          <li className=\"small-font margin-right numericList\">Date of Expire</li>\n        </ul>\n        <Barcode value=\"1234567890\" format=\"CODE128\" height={40} />\n        <p>NOT VALID AS A TRAVEL DOCUMENT</p>\n      </div>\n    );\n  }\n}\n\nexport default CardBack;\n","import React, { Component } from 'react';\nimport ReactToPrint from 'react-to-print';\n\nimport CardFront from '../components/CardFront';\nimport CardBack from '../components/CardBack';\n\nclass Preview extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <CardFront {...this.props} ref={el => (this.componentRef = el)} />\n        <ReactToPrint\n          trigger={() => <p className=\"button\">Print Front Part</p>}\n          content={() => this.componentRef} />\n        <CardBack {...this.props} ref={el => (this.componentRef1 = el)} />\n        <ReactToPrint\n          trigger={() => <p className=\"button\">Print Back Part</p>}\n          content={() => this.componentRef1} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Preview;\n","// @flow\nimport React from 'react';\nimport { Field } from 'redux-form';\nimport type { FieldProps } from 'redux-form';\n\ntype Props = FieldProps & {\n  gender:string[],\n  style:{},\n  label:string,\n  type:string,\n  key:string,\n}\nconst renderSelectList = ({\n  gender, label, type, key,\n}:Props) => (\n  <div className=\"margin\" key={key}>\n    <p className=\"light-text\">{label}</p>\n    {gender !== undefined\n      && gender.map(item => (\n        <React.Fragment key={item}>\n          <label htmlFor={item}>\n            <Field id={item} name=\"gender\" component=\"input\" type={type} value={item} />\n            {item}\n          </label>\n\n        </React.Fragment>\n      ))}\n  </div>\n);\n\nexport default renderSelectList;\n","// @flow\nimport React from 'react';\n\ntype Props = {\n  input: { value: {}, name: string },\n  type: string,\n  label: string,\n  style: {},\n  key: string,\n};\nconst FormField = ({\n  input: { value: originalVal, ...input } = { value: '' },\n  type,\n  label,\n  style,\n  key,\n  meta: { error },\n}: Props) => {\n  const { name } = input;\n  return (\n    <div className=\"margin bold600\" style={style} key={key}>\n      <label className=\"light-text\" htmlFor={name}>\n        {label}\n        <p className=\"flex\">\n          <input {...input} type={type} name={name} id={name} />\n        </p>\n      </label>\n      {/* <span>{error && console.log(error)}</span> */}\n    </div>\n  );\n};\n\nexport default FormField;\n","// @flow\nimport React, { Component } from 'react';\n\ntype Props = {\n  input: { value: {}, name: string },\n  type: string,\n  label: string,\n  handleFile: ()=>mixed,\n};\ntype State = {\n  file: string,\n};\nclass renderAvatar extends Component<Props, State> {\n  render() {\n    const {\n      input: { name },\n      label,\n      type,\n      handleFile,\n    } = this.props;\n    return (\n      <div className=\"margin bold600\" key={name}>\n        <label className=\"light-text\" htmlFor={name}>\n          {label}\n          <p className=\"flex\">\n            <input type={type} name={name} id={name} onChange={handleFile} />\n          </p>\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default renderAvatar;\n","const data = [\n  {\n    name: 'firstName',\n    label: 'First Name',\n    type: 'text',\n  },\n  {\n    name: 'lastName',\n    label: 'Last Name',\n    type: 'text',\n  },\n  {\n    name: 'dob',\n    label: 'Date of Birth',\n    type: 'date',\n  },\n  {\n    name: 'sSN',\n    label: 'Social Security Number',\n    type: 'text',\n  },\n  {\n    name: 'doi',\n    label: 'Date of Issue',\n    type: 'date',\n  },\n  {\n    name: 'doe',\n    label: 'Date of Expiry',\n    type: 'date',\n  },\n  {\n    name: 'gender',\n    label: 'Gender',\n    type: 'radio',\n    gender: ['Male', 'Female', 'InterSex'],\n  },\n  {\n    name: 'avatar',\n    label: 'Avatar',\n    type: 'file',\n  },\n];\n\nexport default data;\n","// @flow\nimport React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport type { FormProps } from 'redux-form/lib/types';\n\nimport renderSelectList from './renderSelectList';\nimport formField from './renderField';\nimport renderAvatar from './renderAvatar';\nimport { default as data } from '../data';\n// import { validate } from '../utl/validation';\n\ntype Props = FormProps;\n\nconst RenderMainform = (props: Props) => {\n  const { handleSubmit, reset } = props;\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1 className=\"center-align light-text\"> ID Card Maker</h1>\n      {data.map((field) => {\n        switch (field.name) {\n          case 'gender':\n            return (\n              <Field\n                name={field.name}\n                label={field.label}\n                component={renderSelectList}\n                gender={field.gender}\n                type={field.type}\n                key={field.name} />\n            );\n          case 'avatar':\n            return (\n              <Field\n                name={field.name}\n                label={field.label}\n                component={renderAvatar}\n                type={field.type}\n                key={field.name}\n                {...props} />\n            );\n\n          default:\n            return (\n              <Field\n                key={field.name}\n                name={field.name}\n                label={field.label}\n                component={formField}\n                type={field.type}\n                {...props} />\n            );\n        }\n      })}\n      <button className=\"button\" onClick={reset}>\n        Clear Form\n      </button>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: 'mainform',\n})(RenderMainform);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getFormValues } from 'redux-form';\n\nimport RenderMainForm from '../components/Mainform';\n\ntype State = {\n  FirstName: string,\n  LastName: string,\n  DateofBirth: Date,\n  SocialSecurityNumber: mixed,\n  DateofIssue: Date,\n  DateofExpiry: Date,\n  Gender: string[],\n  data: {},\n};\ntype Props = {};\n\nconst Mainform = (props: Props) => (\n  <React.Fragment>\n    <RenderMainForm {...props} handleSubmit={() => {}} />\n  </React.Fragment>\n);\n\nconst mapStateToProps = (state: State) => ({\n  data: getFormValues('mainform')(state),\n});\n\nexport default connect(mapStateToProps)(Mainform);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getFormValues } from 'redux-form';\n\nimport Preview from './preview';\nimport MainForm from './mainform';\nimport { default as data } from '../data';\n\nclass DisplayGrid extends Component {\n  state = {\n    file: null,\n    imagePreviewUrl: '',\n  };\n\n  handleFile = (e) => {\n    const reader = new FileReader();\n    const newfile = e.target.files[0];\n    reader.onloadend = () => this.setState({ file: newfile, imagePreviewUrl: reader.result });\n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1 className=\"center-align main-heading\">ID Card Maker</h1>\n        <div className=\"grid twoGrid gridGap center-align\">\n          <MainForm onSubmit={() => {}} handleFile={this.handleFile} />\n          <div>\n            <Preview {...this.props} data={data} file={this.state} />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  values: getFormValues('mainform')(state),\n});\n\nexport default connect(mapStateToProps)(DisplayGrid);\n","// @flow\nimport React from 'react';\nimport './App.css';\nimport DisplayGrid from './containers/DisplayGrid';\n\nconst App = () => (\n  <div className=\"App\">\n    <DisplayGrid />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { reducer as reduxForm } from 'redux-form';\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/*eslint-disable */\nconst store = createStore(\n  combineReducers({ form: reduxForm }),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n/* eslint-enable */\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}